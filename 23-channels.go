package main

import "fmt"

// チャネルは平行実行されるゴルーチン間を接続するパイプです。
// あるゴルーチンからチャネルを通して値を送信し、別のゴルーチンでその値を受信することができます。

func main() {

	// makeで新しいチャネルを作成
	// チャネルは送受信する値で型つけされます
	messages := make(chan string)

	// `channel <-`構文でチャネルへ値を送信します。
	// ここでは、新しいゴルーチンからmessagesチャネルへ"ping"という値を送信しています
	go func() { messages <- "ping" }()

	// `<-channel`構文でチャネルから値を受信します。
	// ここでは、上で送信した"ping"メッセージを受信して、画面に表示しています。
	msg := <-messages
	fmt.Println(msg)

	// デフォルトでは、送る側と受ける側が準備ができるまで、送受信はブロックされます。
	// この性質により、何か特別な同期処理を書かなくても、プログラムの最後で"ping"メッセージを受信するまで待つことができるのです。
}
